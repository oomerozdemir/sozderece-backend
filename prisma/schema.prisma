generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Contact {
  id        Int      @id @default(autoincrement())
  name      String
  phone     String
  email     String
  message   String
  createdAt DateTime @default(now())
}

model TrialMeeting {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  phone     String
  userType  String   // Öğrenci veya Veli
  message   String
  createdAt DateTime @default(now())
}


model User {
  id              Int           @id @default(autoincrement())
  name            String
  email           String        @unique
  password        String
  role            String
  phone           String?
  isVerified      Boolean       @default(false)
  createdAt       DateTime      @default(now())
  emailVerified   Boolean       @default(false)
  phoneVerified   Boolean       @default(false)
  assignedCoachId Int?
  grade           String?
  track           String?
  coachProfile    Coach?        @relation("CoachProfile")
  couponUsages    CouponUsage[]
  orders          Order[]
  assignedCoach   Coach?        @relation("AssignedCoach", fields: [assignedCoachId], references: [id])
}

model Coach {
  id          Int    @id @default(autoincrement())
  name        String
  subject     String
  description String
  image       String
  userId      Int?   @unique
  user        User?  @relation("CoachProfile", fields: [userId], references: [id])
  assignedTo  User[] @relation("AssignedCoach")
}

model Order {
  id            Int         @id @default(autoincrement())
  package       String
  createdAt     DateTime    @default(now())
  userId        Int
  billingInfoId Int
  endDate       DateTime
  startDate     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  status        String      @default("active")
  refundMessage String?
  refundReason  String?
  billingInfo   BillingInfo @relation("BillingToOrder", fields: [billingInfoId], references: [id])
  user          User        @relation(fields: [userId], references: [id])
  orderItems    OrderItem[]
}

model Package {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  price       Float
}

model BillingInfo {
  id          Int     @id @default(autoincrement())
  email       String
  name        String
  surname     String
  address     String
  district    String
  city        String
  postalCode  String
  phone       String
  allowEmails Boolean
  orders      Order[] @relation("BillingToOrder")
}

model OrderItem {
  id          Int    @id @default(autoincrement())
  name        String
  price       String
  quantity    Int
  description String
  orderId     Int
  order       Order  @relation(fields: [orderId], references: [id])
}

model Coupon {
  id           Int           @id @default(autoincrement())
  code         String        @unique
  discountRate Int
  usageLimit   Int
  createdAt    DateTime      @default(now())
  usedBy       CouponUsage[]
}

model CouponUsage {
  id       Int      @id @default(autoincrement())
  userId   Int
  couponId Int
  usedAt   DateTime @default(now())
  coupon   Coupon   @relation(fields: [couponId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([userId, couponId])
}
